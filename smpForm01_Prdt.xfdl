

/**
*  SYSTEM FORM NAME
*
*  @MenuPath    기초관리 > 품목 관리
*  @FileName    smpForm01_Prdt.xfdl 
*  @Creator     박준서
*  @CreateDate  2021.01.14
*  @Version     1.0
*  @Desction    설명
* 
************** 소스 수정 이력 *************************************************
*    Date          Modifier            Description
*******************************************************************************
*  2021.01.14      박준서             품목 관리
*  2021.01.21      박준서             공통화면 기준 재수정
*******************************************************************************
*/

/*********************************************************
 * 1.1 FORM 변수 선언 영역
 ********************************************************/
this.fv_sProjectCd = nexacro.getApplication().av_sProjectCd;
/*********************************************************
 * 1.2 FORM EVENT 영역(onload등)
 ********************************************************/
/**
* Form_onload 최초 로드시 발생되는 이벤트 (필수)
*/
this.Form_onload = function(obj:Form, e:nexacro.LoadEventInfo)
{
    if (take.formOnLoad(this, true)) //공통 온로드(필수) : 최초 온로드시 공통으로 호출되는 함수 --> 필수
    {
        //초기화
        this.fnInit();
    }
}

/*********************************************************
 * 2 필수 FUNCTION 영역 (fnInit, fnSearch, fnSave, fnAddRow, fnDelRow, fnExcel, fnPrint)
 ********************************************************/
/**
 * fnInit : 초기화 함수 검색조건 초기화 및 온로드 세팅
 * @return {N/A}    N/A
 * @example this.fnInit();
 */
this.fnInit = function()
{
	this.fnCommonCode();
	this.fnBtnRoleSetting();
	this.fnSearch();
	alert(take.getActiveForm(this).titletext);
}

/**
 * fnSearch : 조회 transaction (필수) --> 공통 조회에서 호출할 디폴트값 세팅 필요
 * @param  {String} sTranId 트랜젝션 아이디
 * @return {N/A}    N/A
 * @example this.fnSearch("ID");
 */
this.fnSearch = function(sTranId)
{
//공통 조회에서 호출할 디폴트값 세팅 필요
    if (take.nvl(sTranId, "")=="") sTranId = "Search";
	sParam =  "PROJECT_CD=" + this.fv_sProjectCd;
	this.dsPrdt.clearData();
    take.tranSelect(this, "Search", "Prdt.prdtInfoDetail", "dsSearch", "dsPrdt", sParam, "fnCallback");
}
/**
 * fnSave : 저장 transaction (필수) -->공통 저장에서 호출할 디폴트값 세팅 필요
 * @param  {String} sTranId 트랜젝션 아이디
 * @return {N/A}    N/A
 * @example this.fnSave("ID");
 */
 
this.fnSave = function(sTranId)
{
     //공통 조회에서 호출할 디폴트값 세팅 필요
    if (take.nvl(sTranId, "")=="") sTranId = "Save";
    //데이터셋 수정 여부 확인
    if (!take.isDsModified(this.dsPrdt))
    {
        take.alert(this, "Info", "변경된 데이터가 없습니다.");
        return false;
    }
    sParam =  "PROJECT_CD=" + this.fv_sProjectCd;
	//데이터 저장
	take.tranSave(
		this,                //현재 Form 객체
		sTranId,             //Transaction Id
		"Prdt.prdtInfo",  //sqlMapperId (smpForm01Insert, smpForm01Delete, smpForm01Update 3개가 있어야 하고 뒤에 insert, delete, update는 자동으로 호출됨)
		"dsPrdt",            //Indataset(서버로 보낼 dataset)
		"",                  //Outdataset(서버에서 받을 dataset)
		sParam,                  //Parameter
		"fnCallBack"         //Call Back 함수명 (함수를 바로 사용 가능)
	);

}

/**
 * fnAddRow : 행 추가 함수 (필수)--> 공통 행추가에서 호출할 디폴트값 세팅 필요
 * @param  {String} sGridId 그리드 아이디
 * @param  {Number} nRow    addRow 리턴값(추가된 행 위치)
 * @example this.fnAddRow(sGrdId, nRow);
 */
this.fnAddRow = function(sGrdId, nRow)
{
// 	var oArg = {
// 				sArg1 : obj.getBindDataset().getColumn(e.row, "PROJECT_CD")
// 			  , sArg2 : obj.getBindDataset().getColumn(e.row, "PRDT_CD")
// 		};

	take.openPopup(this, "sampleGridLinkPopup", "jun::sampleGridLinkPopup.xfdl", "","", 
	function(){
		this.fnSearch();
	});
}


/**
 * fnDelRow : 행 삭제 함수 (필수) --> 공통 행삭제에서 호출할 디폴트값 세팅 필요
 * @param  {String} sGridId 그리드 아이디
 * @param  {Anonymous} aRow    deleteRow 리턴값
 * @return {N/A} N/A
 * @example this.fnDelRow(sGrdId, nRow); 
 */
this.fnDelRow = function(sGrdId,aRow)
{ 
     //공통 행추가에서 호출할 디폴트값 세팅
    if (take.nvl(sGrdId, "")=="") sGrdId = "divDetail";
    
    //변수 선언
	var objDs;
	var bRtn = true;
    var nCnt, nRow;
	
    //변수에 값 세팅
    objDs = this.dsPrdt;       //행 삭제할 데이터셋
	//현재 체크된 row 받기
	aRow = take.nvl(take.getChkRow(objDs, "CHK"), "");
    if(aRow!=""){ 
		var bConfirm = take.confirm(this, "", "삭제 하시겠습니까?");
		if(bConfirm){
			//배열의 갯수
			nCnt = aRow.length;
			
			//배열 수 만큼 반복
			for (var i=0; i<nCnt; i++)
			{
				//행
				nRow = aRow[i];
				
				//행 삭제
				bRtn = objDs.deleteRow(nRow);
				
				//행 삭제 실패시 for문 중지
				if (bRtn==false)break;
			}
		
			//행 삭제 성공
			if (bRtn)
			{
				take.tranSave(this, "Save", "Prdt.prdtInfo", "dsPrdt", "", "", "fnCallback");
				//삭제 성공후 추가 로직 있을경우
				take.msg(this, "info", nCnt + "건이 삭제되었습니다. ");
			}
// 			else { //삭제 실패
// 				take.alert(this, "Info", nRow+1) + "행 삭제에 실패하였습니다.", "");
// 				//삭제 실패 행으로 이동
// 				objDs.set_rowposition(nRow);
// 			}
		}else take.alert(this, "Info", "삭제 취소하였습니다.", "");
		
	}else{
		take.alert(this, "Info", "선택된 항목이 없습니다.", "");
		return false;
	}
}
/**
 * fnExcel : 엑셀 다운로드 함수 (필수) --> 공통 엑셀 다운로드에서 호출할 디폴트값 세팅 필요
 * @param  {String} sGridId 그리드 아이디
 * @return {N/A} N/A
 * @example this.fnExcel(sGrdId, nRow); 
 */
this.fnExcel = function(sGrdId)
{
    //ExportExcelGrid 파일명, 시트명, 타이틀명
	this.divDetail.form.gridLink.ExportExcelGrid( 
        "prdtList",
		"prdtList",
		"품목 목록");
}

/**
 * fnPrint : 출력 함수 (필수)
 * @param  {N/A} N/A
 * @return {N/A} N/A
 * @example this.fnPrint(); 
 */
this.fnPrint = function()
{    
    //출력없음
    return false;
}

/*********************************************************
 * 3 각 COMPONENT 별 EVENT 영역
 ********************************************************/
//검색버튼 클릭 이벤트
this.pDivSearch_btnSearch_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.fnSearch();
};

this.grdLink_oncellclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	var bindName = take.getBindColName(obj, e.cell);
	if(bindName == "PRDT_CD"){
		var oArg = {
					sArg1 : obj.getBindDataset().getColumn(e.row, "PROJECT_CD")
				  , sArg2 : obj.getBindDataset().getColumn(e.row, "PRDT_CD")
			};
		take.openPopup(this, "sampleGridLinkPopup", "jun::sampleGridLinkPopup.xfdl", oArg,"", 
		function(){
			this.fnSearch("prdtList");
		});
	}
};

//공통버튼 클릭
this.commonbtn_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var div = this.divButton.form;
	switch(obj){
		case div.btnAdd:
			this.fnAddRow();
			break;
		case div.btnDel:
			this.fnDelRow();
			break;
		case div.btnSave:
			this.fnSave();
			break;
		case div.btnPrint:
			this.fnPrint();
			break;
		default:
			break;
	}
};
/*********************************************************
 * 4 사용자 FUNCTION 영역
 ********************************************************/
/**
 * fnCommonCode : 코드호출 함수
 * @param  {String} N/A 
 * @example this.fnCommonCode();
 */
this.fnCommonCode = function ()
{
    take.tranCode(
        this,                           //현재 Form 객체
        ["00009", ""],                      //CODE_INFO TABLE의 그룹키 값 (배열로 여러개 가능)
        ["dsCboUseYn"],                 //Indataset : 서버에서 받을 데이터셋 (배열로 여러개 가능 그룹키 값과 배열갯수가 동일해야함)
        ["SEL",],                        //콤보등에 사용될 경우 첫번째 세팅 값("ALL":전체, "SEL":선택, "":사용안함)(배열로 여러개 가능 그룹키 값과 배열갯수가 동일해야함)
        function(sId, nErrCd, sErrMsg)  //Call Back 함수(함수 명으로도 사용 가능 ex:"fnCallBack")
        {
            //sId     : Transaction Id
            //nErrCd  : Return Code (0보다 작으면 오류)
            //sErrMsg : Return Message
            
//             //사용여부 공통코드 데이터가 있는지 여부
//             if (this.dsCboUseYn.rowcount > 0)
//             {
//                 //사용여부 검색조건 콤보에 첫번째 값 세팅
//                 pDivSearch.form.tabSearch.tabSearch1.form.divSearch1.form.cboUseYn.set_index(0);
//             }
        },
        false                            //동기(false),비동기(true) 여부 기본값은 비동기
    );
}

this.fnBtnRoleSetting = function()
{
// 	this.alert("등록 : "+take.getActiveForm(this).dsBtnRole.getColumn(0, "R_INPUT")
// 	+"조회 : "+take.getActiveForm(this).dsBtnRole.getColumn(0, "R_READ")
// 	+"삭제 : "+take.getActiveForm(this).dsBtnRole.getColumn(0, "R_DELETE")
// 	+"저장 : "+take.getActiveForm(this).dsBtnRole.getColumn(0, "R_SAVE")
// 	);
	var div = this.divButton.form;
    var arrBtn = {"INPUT":div.btnAdd, "DELETE":div.btnDel, "SAVE":div.btnSave, "PRINT":div.btnPrint};
	var nLeft = 1, nInterval = 3;
	var arrBtnRole = ["INPUT", "DELETE", "SAVE", "PRINT"]; //조회, 신규, 삭제, 저장, 인쇄
    
	for( var i=0; i<arrBtnRole.length; i++ )
	{
		var sId = arrBtnRole[i];
		var sRole = take.nvl(take.getActiveForm(this).dsBtnRole.getColumn(0,"R_"+sId),"");
		var objBtn = arrBtn[sId];
		if (sRole == "N")
		{
			//nInterval = 0;
			objBtn.set_visible(false);
			objBtn.set_width(0);
		} else {
			/*nInterval = 5;*/
			objBtn.set_left(nLeft);
			nLeft = parseInt(objBtn.left) + parseInt(objBtn.width) + nInterval;
			
			objBtn.set_visible(true);							
 		}
	}
	this.resetScroll();
};



/*********************************************************
 * 5 TRANSACTION OR CALLBACK 콜백 처리부분
 ********************************************************/
/**
* fnCallBack : transaction callback
* @param  : sId      - 서비스 아이디 (공통 콜백에서 넘어옴)
* @param  : nErrCd   - 에러코드 (공통 콜백에서 넘어옴)
* @param  : sErrMsg  - 에러메세지 (공통 콜백에서 넘어옴)
* @return : N/A
* @example :  
*/
this.fnCallBack = function(sId, nErrCd, sErrMsg)
{
    //Transaction 에러는 공통에서 처리
    
    //Transaction은 성공이나 실제 처리된게 없을 경우 처리
    if( sErrMsg == "SUCC" )
    {
        //Success Script      
    } else {
        //Etc Script
    }   
    
    switch(sId)
    {
        case "Search" : //조회 콜백
			this.divDetail.form.grdMain.selectRow(-1);
			var nFRow = this.dsPrdt.findRowAsNF("PRDT_CD", this.fv_sSaveUserCd);
			if( nFRow != -1 ) {
				this.divDetail.form.grdMain.selectRow(nFRow);
			} else {
				if(this.dsPrdt.getRowCount() > 0){
					this.divDetail.form.grdMain.selectRow(0);
				}
			}
			this.divDetail.form.staTitle.set_text("품목 목록 (총 " + this.dsPrdt.rowcount + "건)");
			take.msg(this, "info", "품목 목록 " + this.dsPrdt.rowcount + "건이 조회되었습니다. ");
            break;
			
		
        default :
            break;
			
		
    }
}
/* 그리드 페이징 기능 추가 ! 
 * File Name   : np_Grid_Format_Paging_filter.xfdl
 * Description : Grid를 이용한 페이징처리1
 */

this.fv_nTotCount   = 0;	// 전체레코드수
this.fv_nStart		= 1;   	// 시작 번호
this.fv_nEnd		= 10;   // 끝 번호
this.fv_nNowPage    = 1;   	// 현재 페이지
this.fv_nPageSize	= 10;   // 한페이지 최대 레코드수
this.fv_nPageScale	= 10;	// 화면 최대 페이지수
this.fv_nTotPage    = 0;	// 전체페이지수

/*  버튼클릭  */
this.btn_execute_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{		
    this.dsPrdt.filter("");
    this.fv_nNowPage = 1;
    this.fv_nTotCount  = this.dsPrdt.getRowCount();	// 전체레코드수
    this.fn_retrieve();
};

/*  onitemchanged  - 페이지 선택*/
this.cmb_input2_onitemchanged = function(obj:Combo, e:nexacro.ItemChangeEventInfo)
{
	this.fv_nNowPage  =  this.cmb_input2.value;
    this.fn_retrieve();
};

/*
 * Function Name : fn_retrieve
 * Description   : 서버에서 조회한것처럼 원본에서 filter 처리
 * Parameter     : 
 * Return        : 
 * Example       : fn_retrieve();
 */
this.fn_retrieve = function()
{			
    var nStrat = parseInt((this.fv_nNowPage - 1) / this.fv_nPageScale) * (this.fv_nPageScale * this.fv_nPageSize) + 1;
    var nEnd   = parseInt((this.fv_nNowPage - 1) / this.fv_nPageScale) * (this.fv_nPageScale * this.fv_nPageSize) + (this.fv_nPageScale * this.fv_nPageSize);

    this.dsPrdt.filter("COL0 >= " + nStrat + " && COL0 <= " + nEnd);				

    this.fn_makePage();	
    this.fn_Paging();            
};

/*
 * Function Name : fn_Paging
 * Description   : 페이지 번호 클릭시 filter 처리
 * Parameter     : 
 * Return        : 
 * Example       : fn_Paging();
 */
this.fn_Paging = function()
{
    this.fv_nEnd   = this.fv_nNowPage * this.fv_nPageSize;
    this.fv_nStart = this.fv_nEnd - this.fv_nPageSize + 1;

    this.dsPrdt.copyData(this.ds_data0, true);
    this.ds_data1.filter("COL0 >= " + this.fv_nStart + " && COL0 <= " + this.fv_nEnd);		   
}

/*
 * Function Name : fn_pageClick
 * Description   : 페이지 번호 클릭시 화면디스플레이 변경
 * Parameter     : 
 * Return        : 
 * Example       : fn_pageClick();
 */
this.fn_pageClick = function(obj)
{	
    this.fv_nNowPage 	  = obj.userData;    
    this.cmb_input2.set_value(this.fv_nNowPage);
     
	var nStartPage = Math.floor((Number(this.fv_nNowPage)-1) / Number(this.fv_nPageScale));
	    nStartPage = (nStartPage * this.fv_nPageScale) + 1;
	var nEndPage   = Number(nStartPage + this.fv_nPageScale);    

	for (var i = nStartPage; i < nEndPage; i++ )
	{
        if (this.divPage.form.components["btn_"+i] == null)
        {
            break;
        }
      
        this.divPage.form["btn_"+i].set_color("black");
        this.divPage.form["btn_"+i].set_font("굴림,9");	
	}
    
    obj.set_color("blue");
    obj.set_font("굴림,9,bold");    

	this.fn_Paging();
};

/*
 * Function Name : fn_pageChange
 * Description   : << , < , > , >> 버튼 클릭시 원본에서 filter 처리할수 있도록 함
 * Parameter     : 
 * Return        : 
 * Example       : fn_pageChange();
 */
this.fn_pageChange = function(obj)
{
    this.fv_nNowPage = obj.userData;
    this.fn_retrieve();    
};

/*
 * Function Name : fn_makePage
 * Description   : 페이징 처리 부분 동적생성
 * Parameter     : 
 * Return        : 
 * Example       : fn_makePage();
 */
this.fn_makePage = function()
{
	if (this.components["divPage"] != null)
	{
		var objDelete = this.removeChild("divPage");
		objDelete.destroy();
	}

	var objDiv = new Div;
	objDiv.init("divPage",  85, 327, 330, 30, null, null);
	this.addChild("divPage", objDiv);
	objDiv.set_border("0px");
	objDiv.show();

	var nLeft   = 100;
	var nWidth  = 20;
	var nTop	= 5;

	var nBottom = 25;	
	var nTab	= 1;

	if (Math.floor(this.fv_nTotCount % this.fv_nPageSize) > 0)
	{
		this.fv_nTotPage = Math.floor(this.fv_nTotCount / this.fv_nPageSize) + 1;
	}
	else
	{
		this.fv_nTotPage = Math.floor(this.fv_nTotCount / this.fv_nPageSize);
	}

	var nStartPage = Math.floor((Number(this.fv_nNowPage)-1) / Number(this.fv_nPageScale));
	    nStartPage = (nStartPage * this.fv_nPageScale) + 1;
	var nEndPage   = Number(nStartPage + this.fv_nPageScale);

	for (var i = nStartPage; i < nEndPage ; i++)
	{
		if (i > this.fv_nTotPage)
		{
			break;   
		}
		nLeft -= 10;
	}
	
	var objBtn = null;
	// <<
	objBtn = this.fn_getObjButton("first", nLeft, nTop, nWidth, nBottom, "1", "<<", 0);
	if (nStartPage > this.fv_nPageScale)
	{		
		objBtn.addEventHandler("onclick", this.fn_pageChange, this);
	}
	else
	{
		objBtn.set_enable(false);
	}
	nLeft = nLeft + nWidth;

	// <
	objBtn = this.fn_getObjButton("before", nLeft, nTop, nWidth, nBottom, nStartPage-1, "<", nTab);
	if (nStartPage > this.fv_nPageScale)
	{
		objBtn.addEventHandler("onclick", this.fn_pageChange, this);
	}
	else
	{
		objBtn.set_enable(false);
	}
	nLeft = nLeft + nWidth;

	// Paging
	for (var i = nStartPage ; i < nEndPage ; i++)
	{		
		nLeft = nLeft + nWidth;
		if (i > this.fv_nTotPage)
		{
			break;
		}
		
		var rtn = i;
		rtn = rtn.toString();
		
		objBtn = this.fn_getObjButton("btn_"+i, nLeft, nTop, nWidth, nBottom, i, rtn, nTab);				
		objBtn.addEventHandler("onclick", this.fn_pageClick, this);		
		objBtn.set_border("0 none #808080ff");				
				
		if (i == this.fv_nNowPage)
		{
			objBtn.set_color("blue");
			objBtn.set_font("Dotum,9,bold");
		}
		else
		{
			objBtn.set_color("Black");
			objBtn.set_font("Dotum,9");
		}
	}
	
	if (i == nEndPage)
	{
		nLeft = nLeft + nWidth + nWidth;
	}
	else
	{
		nLeft = nLeft + nWidth;	
	}
	
	// >
	objBtn = this.fn_getObjButton("next", nLeft, nTop, nWidth, nBottom, nEndPage, ">", nTab);
	if (nEndPage <= this.fv_nTotPage)
	{
		objBtn.addEventHandler("onclick", this.fn_pageChange, this);
	}
	else  
	{
		objBtn.set_enable(false);
	}
	nLeft = nLeft + nWidth;
	
	// >>
	objBtn = this.fn_getObjButton("end", nLeft, nTop, nWidth, nBottom, this.fv_nTotPage, ">>", nTab);
	if (nEndPage < this.fv_nTotPage)
	{		
		objBtn.addEventHandler("onclick", this.fn_pageChange, this);		
	}
	else
	{
		objBtn.set_enable(false);
	}
	nLeft = nLeft + nWidth;  
	this.fn_setDisplay();	
};

/*
 * Function Name : fn_getObjButton
 * Description   : Button Create
 * Parameter     : ID, Left, Top, Width, Bottom, userData, Text, Tab
 * Return        : Button Object
 * Example       : fn_getObjButton();
 */
this.fn_getObjButton = function(sId, nLeft, nTop, nWidth, nBottom, sData, sText, nTab)
{
	var objBtn = new Button;
	objBtn.init(sId, nLeft, nTop, nWidth, nBottom, null, null);
	objBtn.userData = sData;
	objBtn.set_text(sText);	        
	objBtn.set_taborder(nTab);
	this.divPage.addChild(sId, objBtn);
	objBtn.show();
	return objBtn;
};

/*
 * Function Name : fn_setDisplay
 * Description   : Display
 * Parameter     : 
 * Return        : 
 * Example       : fn_setDisplay();
 */
this.fn_setDisplay = function()
{
	if (this.fv_nTotCount > 0)
	{
		this.ds_data2.clearData();
		for (var i = 1; i <= this.fv_nTotPage; i++)
		{
			this.ds_data2.addRow();
			this.ds_data2.setColumn((i-1), "COL0", i);
			this.ds_data2.setColumn((i-1), "COL1", i);
		}
			
		this.sta_input0.set_visible(true);
		this.sta_input1.set_visible(true);		
		this.cmb_input0.set_visible(true);
		this.cmb_input1.set_visible(true);
	
		this.cmb_input0.set_value(this.fv_nPageSize);		
		this.cmb_input1.set_value(this.fv_nPageScale);		
		this.sta_output0.set_visible(true);
		this.sta_output1.set_visible(true);
		this.sta_output1.set_text(this.fv_nTotCount);		
		this.cmb_input2.set_visible(true);
		this.cmb_input2.set_value(this.fv_nNowPage);			
	}
	else
	{
		this.sta_input0.set_visible(false);
		this.sta_input1.set_visible(false);		
		this.cmb_input0.set_visible(false);
		this.cmb_input1.set_visible(false);		
		this.sta_output0.set_visible(false);
		this.sta_output1.set_visible(false);
		this.cmb_input2.set_visible(false);
	}
};

